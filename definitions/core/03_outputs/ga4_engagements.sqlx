
config {
  type: "incremental",
  // disabled: true, // this is a temp table to create other engagment breakdown tables 
  tags: [dataform.projectConfig.vars.GA4_DATASET,"events","prod"],
  database: dataform.projectConfig.vars.OUTPUT_PROJECT,
  schema: dataform.projectConfig.vars.TRANSFORMATIONS_DATASET,
  name: "ga4_engagements",
  description: "Output events table: unnested, cleaned, clustered data with several fixes",
  bigquery: {
    partitionBy: "event_date",
    clusterBy: ["event_name", "session_id"],
    labels: require("includes/core/helpers.js").helpers.storageLabels()
  },
    columns: require("includes/core/documentation/helpers.js").ga4Events
}


js {
  const { helpers } = require("includes/core/helpers");
  const config = helpers.getConfig();
  /* check if there's invalid columns or dupe columns in the custom column definitions */
  helpers.checkColumnNames(config);
  
  var dateFilter = "" ;
  if (dataform.projectConfig.vars.RUN_FOR_DATE != "") {
    dateFilter = `parse_date('%Y%m%d', regexp_extract(_table_suffix,'[0-9]+')) = date_checkpoint `;
  } else { 
    dateFilter = `parse_date('%Y%m%d', regexp_extract(_table_suffix,'[0-9]+')) >= date_checkpoint `;
  }
}

  -- ==============================
  --            PRE - OPERATIONS
  -- ==============================
/* incrementality */
pre_operations {
  declare date_checkpoint DATE;
    ---  // this triple dash means something in dataform?

  -- this is for when we need to refill for certain date
  IF '${dataform.projectConfig.vars.RUN_FOR_DATE}' <> 'undefined' THEN 
    set date_checkpoint = (
      ${when(incremental(), 
          `select date('${dataform.projectConfig.vars.RUN_FOR_DATE}')`, 
          `select date('${config.GA4_START_DATE}')`
           )
      });
      -- delete some older data, since this may be updated later by GA4
      ${
        when(incremental(),
          `delete from ${self()} where event_date = date_checkpoint;`
          )
      }
  ELSE
      set date_checkpoint = (
        ${when(incremental(),
        `select coalesce(max(event_date)+1, date('${config.GA4_START_DATE}'))
            from ${self()} where is_final is True`,
        `select date('${config.GA4_START_DATE}')`)} 
      );
      -- delete some older data, since this may be updated later by GA4
      ${
        when(incremental(),
          `delete from ${self()} where event_date >= date_checkpoint;`
          )
      }
    END IF;
}
  -- ==============================
  --        POST-OPERATIONS
  -- ==============================
post_operations {
    ${when(incremental(),
    `EXPORT DATA OPTIONS(
        uri=(CONCAT('gs://${config.GCS_BUCKET}/',  FORMAT_DATE('%Y%m%d' , date_checkpoint), '_gcp_', '${name()}', '_*.parquet')), 
        format='PARQUET',
        overwrite=true
       ) AS

          SELECT DISTINCT * FROM (        -- Overhead SELECT DISTINCT and LIMIT are aded to fix the issue with producting multiple export files insteand of one
          SELECT * FROM ${self()} WHERE event_date = date_checkpoint
          )
          ORDER BY session_id LIMIT 1000000000000000000; `
    )}

    
}
  -- ==============================
  --            QUERY
  -- ==============================
with query_source as (

SELECT event_date, event_name, event_id,
    time.event_timestamp_utc,
    user_pseudo_id, session_id,

    geo.*,
    page.location as page_location, 
    page.* except(location),
    session_traffic_source_last_click.cross_channel_campaign,

    event_params_custom.location,
    event_params_custom.header,

    -- File related event parameters
    event_params_custom.file_name,
    event_params_custom.file_extension,
    event_params_custom.file_download_count,

    -- Form related event parameters
    event_params_custom.form_name,
    event_params_custom.form_submission_complete_count,
    event_params_custom.form_submission_attempt_count,
    event_params_custom.form_submission_failure_count,

    -- Video related parameters
    event_params_custom.video_title, 
    event_params_custom.video_provider,
    event_params_custom.video_url,
    event_params_custom.video_play_type,
    event_params_custom.video_duration,
    event_params_custom.video_percent,
    event_params_custom.video_current_time,
    event_params_custom.video_start_count,
    event_params_custom.video_complete_count,
    event_params_custom.video_impression_count,
    event_params_custom.video_watch_time,

    -- Navigation related parameters
    event_params_custom.carousel_action,
    event_params_custom.outbound_link_type,
    event_params_custom.link_format,
    event_params_custom.link_text,
    event_params_custom.link_url,
    event_params_custom.click_text,
    event_params_custom.click_url,
    event_params_custom.cta_text,
    event_params_custom.cta_url,
    event_params_custom.outbound_general_link_click_count,
    event_params_custom.outbound_mailto_link_click_count,
    event_params_custom.outbound_social_link_click_count,
    event_params_custom.outbound_tel_link_click_count,

  -- Provider related event paraeters
    event_params_custom.provider_procedure, 
    event_params_custom.provider_search,
    event_params_custom.provider_distance,
    event_params_custom.sort_by,
    event_params_custom.provider_search_result,
    event_params_custom.provider_search_result_selected_count,

    event_params_custom.search_term,
    event_params_custom.search_type,
    event_params_custom.search_filter,
    event_params_custom.search_result,
    event_params_custom.num_search_results,

    event_params_custom.previous_url,
    event_params_custom.external_referrer,

    event_params.engagement_time_msec,
    is_final 

 FROM ${ref("base_ga4_events")} 
WHERE event_date >= date_checkpoint
and REGEXP_CONTAINS(event_name, r'file|click|video|form|provider')

)

select
  current_timestamp() as _run_timestamp, -- indicates when the row was last run
  *
from query_source
where true


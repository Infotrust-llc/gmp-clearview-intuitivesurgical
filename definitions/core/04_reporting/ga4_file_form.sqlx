 /*
  This file is part of "GMP Clearview" package.
  Copyright (C)  2025 Infotrust 
  Alina Zilbergerts, Trish Dothkar,
  -- */

config {
  type: "incremental",
  //materialized: true ,
  tags: [dataform.projectConfig.vars.GA4_DATASET,"file_form","prod"],
  database: dataform.projectConfig.vars.OUTPUT_PROJECT,
  schema: dataform.projectConfig.vars.REPORTING_DATASET,
  name:"ga4_file_form",
  description: "File downloads / form submits summary table",
  bigquery: {
    partitionBy: "event_date",
    //clusterBy: ["event_name", "event_id"],
    labels: require("includes/core/helpers.js").helpers.storageLabels()
  },
    columns: require("includes/core/documentation/helpers.js").ga4Events
}

js {
    const { helpers } = require("includes/core/helpers");
    const config = helpers.getConfig();

    var dateFilter = "" ;
  if (dataform.projectConfig.vars.RUN_FOR_DATE != "") {
    dateFilter = ` event_date = date_checkpoint `;
  } else { 
    dateFilter = ` event_date >= date_checkpoint `;
  }
}

  -- ==============================
  --            PRE-OPERATIONS 
  -- ==============================
/* incrementality */
pre_operations {
  declare date_checkpoint DATE;
    ---  // this triple dash means something in dataform?

  -- this is for when we need to refill for certain date
  IF '${dataform.projectConfig.vars.RUN_FOR_DATE}' <> 'undefined' THEN 

    set date_checkpoint = (
      ${when(incremental(), 
          `select date('${dataform.projectConfig.vars.RUN_FOR_DATE}')`, 
          `select date('${config.GA4_START_DATE}')`
           )
      });
      -- delete some older data, since this may be updated later by GA4
      ${
        when(incremental(),
          `delete from ${self()} where event_date = date_checkpoint;`
          )
      }
  ELSE
      set date_checkpoint = (
        ${when(incremental()  || '${type()}' == 'view', 
        `select coalesce(max(event_date)+1, date('${config.GA4_START_DATE}'))
            from ${self()} where is_final is True`,
        `select date('${config.GA4_START_DATE}')`)} 
      );
      -- delete some older data, since this may be updated later by GA4
      ${
        when(incremental() ,
          `delete from ${self()} where event_date >= date_checkpoint;`
          )
      }
    END IF;
}

  -- ==============================
  --        POST-OPERATIONS
  -- ==============================
post_operations {
    ${when(incremental(), 
    `EXPORT DATA OPTIONS(
        uri=(CONCAT('gs://${config.GCS_BUCKET}/${dataform.projectConfig.vars.REPORTING_DATASET}/',  FORMAT_DATE('%Y%m%d' , date_checkpoint), '_gcp_', '${name()}', '_*.', '${dataform.projectConfig.vars.EXPORT_FILE_FORMAT}')), 
        format=UPPER('${dataform.projectConfig.vars.EXPORT_FILE_FORMAT}'),
        overwrite=true
       ) AS

          SELECT DISTINCT * FROM (        -- Overhead SELECT DISTINCT and LIMIT are aded to fix the issue with producting multiple export files insteand of one
          SELECT * FROM ${self()} WHERE event_date = date_checkpoint
          )
          ORDER BY _run_timestamp LIMIT 1000000000000000000; `
    )
    }
}

SELECT current_timestamp() as _run_timestamp, -- indicates when the row was last run
        * EXCEPT(engagement_time_msec, 
        form_submission_attempt_count, 
        form_submission_complete_count,
        form_submission_failure_count,
        file_download_count),

      SUM(file_download_count) file_download_count,
      SUM(form_submission_attempt_count) form_submission_attempt_count,
      SUM(form_submission_complete_count) form_submission_complete_count,
      SUM(form_submission_failure_count) form_submission_failure_count,
      SUM(engagement_time_msec)/1000 engagement_time_sec,

FROM (
      SELECT * FROM (
        SELECT  
        event_date, session_id, user_pseudo_id, event_name, 
        continent, country, region, city, 
        SPLIT(page_location, "?")[SAFE_OFFSET(0)] as page_location, 
        cross_channel_campaign.default_channel_group,
        cross_channel_campaign.source, 
        cross_channel_campaign.medium, 
        cross_channel_campaign.campaign_name,
        location, header,
        file_name, file_extension,  
        click_text, click_url, link_text, link_url,
        form_name,
    
        --Metrics
        form_submission_attempt_count, 
        form_submission_complete_count,
        form_submission_failure_count,
        file_download_count,
        engagement_time_msec,
        is_final

        FROM ${ref("ga4_engagements")}
        -- WHERE ${dateFilter}     
        
      )
        PIVOT 
        (
          COUNT(event_name) FOR event_name IN ("file_download", "form_submission_complete", "form_submission_start")
        )
)
group by all

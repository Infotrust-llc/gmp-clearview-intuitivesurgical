config {
  type: "incremental",
  uniqueKey: ['session_id'],
  description: "Output table for understanding daily overall performance",
  database: dataform.projectConfig.vars.OUTPUT_PROJECT,
  schema: dataform.projectConfig.vars.REPORTING_DATASET,
  name: "ga4_daily_performance",
  tags:[dataform.projectConfig.vars.GA4_DATASET,"daily_performance","prod"],
  bigquery: {
    partitionBy: "session_date"
  },
}

js {
    const { helpers } = require("includes/core/helpers");
    const config = helpers.getConfig();
}

  -- ==============================
  --            PRE-OPERATIONS 
  -- ==============================
/* incrementality */
pre_operations {
  declare date_checkpoint DATE;
--   set @@query_label = "${helpers.executionLabels()}";
  set date_checkpoint = (
    ${when(incremental(),
      `select
        coalesce(max(session_date)+1, date('${config.GA4_START_DATE}'))
      from ${self()}`,
    `select date('${config.GA4_START_DATE}')`)}   /* the default, when it's not incremental */
  );

}

  -- ==============================
  --        POST-OPERATIONS
  -- ==============================
post_operations {
    ${when(incremental(),
    `EXPORT DATA OPTIONS(
        uri=(CONCAT('gs://${config.GCS_BUCKET}/',  FORMAT_DATE('%Y%m%d' , date_checkpoint), '_gcp_', '${name()}', '_*.parquet')), 
        format='PARQUET',
        overwrite=true
       ) AS

          SELECT DISTINCT * FROM (        -- Overhead SELECT DISTINCT and LIMIT are aded to fix the issue with producting multiple export files insteand of one
          SELECT * FROM ${self()} WHERE event_date = date_checkpoint
          )
          ORDER BY _run_timestamp LIMIT 1000000000000000000; `
    )}
}

  -- ==============================
  --            QUERY
  -- ==============================
    select
      session_date,
      stream_id,
      device.category as device_category,
      device.operating_system as operating_system,
      geo.continent as continent, 
      geo.country as country, 
      geo.region as region, 
      geo.city as city,
      app_info.firebase_app_id as firebase_app_id,
      platform,
      cross_channel_campaign.source as session_source,
      cross_channel_campaign.medium as session_medium,
      cross_channel_campaign.default_channel_group as default_channel_group,
      landing_page.landing_page_path as landing_page_path,
      exit_page.exit_page_path as exit_page_path,
      user_type,
      count(distinct session_id) as sessions,
      countif(is_engaged_session) as engaged_sessions,
      count(distinct user_pseudo_id) as users,
      countif(is_active_user) as is_active_user,
      sum(events) as events,
      sum(pageviews) as pageviews,
      sum(purchase_revenue) as purchase_revenue,
      sum(total_item_quantity) as total_item_quantity,
      sum(unique_items) as unique_items,
      sum(transactions) as transactions,
      sum(cta_click) as cta_clicks,
      sum(form_submission_complete) as form_submission_complete,
      sum(internal_link_click) as internal_link_click,
      sum(provider_locator_cta_click) as provider_locator_cta_click,
      sum(provider_locator_get_directions_click) as provider_locator_get_directions_click,
      sum(provider_locator_mailto_click) as provider_locator_mailto_click,
      sum(provider_locator_search) as provider_locator_search,
      sum(provider_locator_search_result_selected) as provider_locator_search_result_selected,
      sum(provider_locator_tel_click) as provider_locator_tel_click,
      sum(video_complete) as video_complete,
      sum(video_start) as video_start,
    from ${ref("ga4_sessions")}
    group by 
     session_date,
      stream_id,
      device,
      geo,
      app_info,
      platform,
      cross_channel_campaign,
      landing_page,
      exit_page,
      user_type
    

